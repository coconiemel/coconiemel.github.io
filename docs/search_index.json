[["relational-data-and-databases-7.html", "Relational data and databases (7) Introduction", " Relational data and databases (7) Introduction This assignment was focused on learning the basics of the SQL language and how to work this around relational data and databases. These are collections of information stored in separate tables with underlying relations to create an easy overview of relations between different data structures. Starting by creating three data frames out of files and making them tidy. library(dslabs) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.4.0 ✔ purrr 0.3.5 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.5.0 ## ✔ readr 2.1.3 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(DBI) library(dplyr) library(ggplot2) # The flu ## Import, first 11 lines are metadata flu_df &lt;- read_csv(&quot;files/flu_data.csv&quot;, skip = 11) ## Rows: 659 Columns: 30 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (29): Argentina, Australia, Austria, Belgium, Bolivia, Brazil, Bulgaria... ## date (1): Date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Make tidy flu_df_tidy &lt;- flu_df %&gt;% pivot_longer(cols = c(2:ncol(flu_df)), names_to = &#39;country&#39;, values_to = &#39;cases&#39;) %&gt;% na.omit() # Dengue ## Import, first 11 lines are metadata dengue_df &lt;- read_csv(&quot;files/dengue_data.csv&quot;, skip = 11) ## Rows: 659 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (10): Argentina, Bolivia, Brazil, India, Indonesia, Mexico, Philippines... ## date (1): Date ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Make tidy dengue_df_tidy &lt;- dengue_df %&gt;% pivot_longer(cols = c(2:ncol(dengue_df)), names_to = &#39;country&#39;, values_to = &#39;cases&#39;) %&gt;% na.omit() # Gapminder ## The dataframe is part of the dslabs package and therefore does not need to be imported. ## The dataframe is already tidy. An important part of relational data is enabling comparison across different data frames. In this case we will be looking at the country and date, but in the data frames we use there are a couple of things that needs to be adjusted to make them similar. # Column &#39;country&#39; ## Check types. class(flu_df_tidy$country) # Character ## [1] &quot;character&quot; class(dengue_df_tidy$country) # Character ## [1] &quot;character&quot; class(gapminder$country) # Factor ## [1] &quot;factor&quot; ## Change all types into factor flu_df_tidy$country &lt;- as.factor(flu_df_tidy$country) dengue_df_tidy$country &lt;- as.factor(dengue_df_tidy$country) ## Check if it worked class(flu_df_tidy$country) # Factor ## [1] &quot;factor&quot; class(dengue_df_tidy$country) # Factor ## [1] &quot;factor&quot; ## It worked! # Column &#39;date&#39; ## Check types. class(flu_df_tidy$Date) # Date ## [1] &quot;Date&quot; class(dengue_df_tidy$Date) # Date ## [1] &quot;Date&quot; class(gapminder$year) # Integer ## [1] &quot;integer&quot; ## Because flu and dengue are specified to day instead of the year at gapminder, a &#39;year&#39; column needs to be added and changed into the integer type to create similarity. flu_df_tidy &lt;- flu_df_tidy %&gt;% mutate(year = substr(flu_df_tidy$Date, start=1, stop=4)) dengue_df_tidy &lt;- dengue_df_tidy %&gt;% mutate(year = substr(dengue_df_tidy$Date, start=1, stop=4)) flu_df_tidy$year &lt;- as.integer(flu_df_tidy$year) dengue_df_tidy$year &lt;- as.integer(dengue_df_tidy$year) ## Check if it worked. class(flu_df_tidy$year) # Integer ## [1] &quot;integer&quot; class(dengue_df_tidy$year) # Integer ## [1] &quot;integer&quot; ## It worked! The data frames are now similar and can be stored into csv and rds files. # Export data frames as csv write.csv(flu_df_tidy, &quot;files/flu.csv&quot;, row.names=FALSE) write.csv(dengue_df_tidy, &quot;files/dengue.csv&quot;, row.names=FALSE) write.csv(gapminder, &quot;files/gapminder.csv&quot;, row.names=FALSE) # Export data frames as rds saveRDS(flu_df_tidy, file=&quot;files/flu.rds&quot;) saveRDS(dengue_df_tidy, file=&quot;files/dengue.rds&quot;) saveRDS(gapminder, file=&quot;files/gapminder.rds&quot;) DBeaver and R were connected (my real password is hidden) and the tables were inserted into the ‘workflowsdb’ database in DBeaver for inspection. con &lt;- dbConnect(RPostgres::Postgres(), dbname = &quot;workflowsdb&quot;, host=&quot;localhost&quot;, port=&quot;5432&quot;, user=&quot;postgres&quot;, password=&quot;password&quot;) dbWriteTable(con, &quot;gapminder&quot;, gapminder) dbWriteTable(con, &quot;flu&quot;, flu_df_tidy) dbWriteTable(con, &quot;dengue&quot;, dengue_df_tidy) Now that the tables are imported, i checked a couple of things. Dengue has no “NULL” variables in country and year, 6263 cases in the data set and the average amount of cases is 0.14 with a standard deviation of 0.14. The country with the least amount of cases is Argentina with 0 cases and the country with the most is Venezuela with 1 case. The flu has no “NULL variables in country and year, 17266 cases in the data set and the average amount of cases is 473.74 with a standard deviation of 768.95. The country with the least amount of cases is Argentina with 0 cases and the country with the most is Uruguay 10555 cases. Gapminder had no “NULL” variables in country and year. The information is obtained by the following R and SQL code: # Dengue min(dengue_df_tidy$cases) # 0 ## [1] 0 max(dengue_df_tidy$cases) # 1 ## [1] 1 mean(dengue_df_tidy$cases) # 0.14 ## [1] 0.1389711 sd(dengue_df_tidy$cases) # 0.14 ## [1] 0.1389235 # Flu min(flu_df_tidy$cases) # 0 ## [1] 0 max(flu_df_tidy$cases) # 10555 ## [1] 10555 mean(flu_df_tidy$cases) # 473.74 ## [1] 473.7355 sd(flu_df_tidy$cases) # 768.95 ## [1] 768.9549 Figure 2: SQL code of data inspection. For a good analysis of the different, but related data, they need to be joined together in one table with the important columns. Figure 3: SQL code of left-join. The analysis is done by descriptive statistics. First is the Shapiro-wilk to check for normal data, this was … the case. The next step is an ANOVA, because we deal with 3 sets, this lead to … . Finally the post-hoc tests, which concluded that … . A good analysis contains graphs to bring things in vision. Load gapminder data Join and create table Descriptive statistics 3 visualisations "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
